[{"/home/edward/Documents/programing/gh-portfolio/src/index.tsx":"1","/home/edward/Documents/programing/gh-portfolio/src/serviceWorker.ts":"2","/home/edward/Documents/programing/gh-portfolio/src/routes.tsx":"3","/home/edward/Documents/programing/gh-portfolio/src/home/index.tsx":"4","/home/edward/Documents/programing/gh-portfolio/src/aboutThisSite/index.tsx":"5","/home/edward/Documents/programing/gh-portfolio/src/aboutMe/index.tsx":"6","/home/edward/Documents/programing/gh-portfolio/src/components/header/index.tsx":"7","/home/edward/Documents/programing/gh-portfolio/src/home/components/repoList.tsx":"8","/home/edward/Documents/programing/gh-portfolio/src/components/header/NavItem.tsx":"9","/home/edward/Documents/programing/gh-portfolio/src/components/DarkMode/index.tsx":"10","/home/edward/Documents/programing/gh-portfolio/src/home/components/repoCard.tsx":"11","/home/edward/Documents/programing/gh-portfolio/src/components/markDown/snippet.tsx":"12","/home/edward/Documents/programing/gh-portfolio/src/components/errorBoundary/index.tsx":"13"},{"size":924,"mtime":1610886670959,"results":"14","hashOfConfig":"15"},{"size":5262,"mtime":1605089354625,"results":"16","hashOfConfig":"15"},{"size":988,"mtime":1610886747936,"results":"17","hashOfConfig":"15"},{"size":276,"mtime":1610884889131,"results":"18","hashOfConfig":"15"},{"size":281,"mtime":1610884889183,"results":"19","hashOfConfig":"15"},{"size":1520,"mtime":1610886806321,"results":"20","hashOfConfig":"15"},{"size":1235,"mtime":1610884889131,"results":"21","hashOfConfig":"15"},{"size":1607,"mtime":1610886812029,"results":"22","hashOfConfig":"15"},{"size":251,"mtime":1610884889183,"results":"23","hashOfConfig":"15"},{"size":425,"mtime":1610886812029,"results":"24","hashOfConfig":"15"},{"size":2383,"mtime":1610886812029,"results":"25","hashOfConfig":"15"},{"size":521,"mtime":1610884764687,"results":"26","hashOfConfig":"15"},{"size":593,"mtime":1605089354625,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qtgd5i",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/edward/Documents/programing/gh-portfolio/src/index.tsx",["57","58","59","60"],"/home/edward/Documents/programing/gh-portfolio/src/serviceWorker.ts",[],"/home/edward/Documents/programing/gh-portfolio/src/routes.tsx",["61"],"/home/edward/Documents/programing/gh-portfolio/src/home/index.tsx",[],"/home/edward/Documents/programing/gh-portfolio/src/aboutThisSite/index.tsx",[],"/home/edward/Documents/programing/gh-portfolio/src/aboutMe/index.tsx",[],"/home/edward/Documents/programing/gh-portfolio/src/components/header/index.tsx",["62"],"/home/edward/Documents/programing/gh-portfolio/src/home/components/repoList.tsx",["63","64"],"import React, { useEffect, useState } from 'react'\nimport { List, ListItem, Spinner, Text } from '@chakra-ui/react'\nimport { RepoCard } from './repoCard'\nimport { repositories } from '../../config.json'\n\n\nexport function RepoList() {\n  const [error, setError] = useState({ message: '' })\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [data, setData] = useState([{ name: '' }])\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/EdwardBrodskiy/repos\")\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText)\n        }\n        return response\n      })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true)\n          setData(result)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setError(error)\n          setIsLoaded(true)\n        }\n      )\n  }, [])\n\n  if (error.message !== '') {\n    return <Text>Error: {error.message}</Text>\n  } else if (!isLoaded) {\n    return <Spinner />\n  } else {\n    let repoList = repositories.priorityRepos\n    data.forEach(repo => {\n      if (!repositories.excludedRepos.includes(repo.name) && !repoList.includes(repo.name) && repo.name !== '') {\n        repoList.push(repo.name)\n      }\n    })\n    return (\n      <List spacing={8} ml={4}>\n        {repoList.map((repoName, index) => <ListItem key={repoName}><RepoCard repoName={repoName} isRight={!!(index % 2)} /></ListItem>)}\n      </List>\n    )\n  }\n}\n",["65","66"],"/home/edward/Documents/programing/gh-portfolio/src/components/header/NavItem.tsx",[],"/home/edward/Documents/programing/gh-portfolio/src/components/DarkMode/index.tsx",[],"/home/edward/Documents/programing/gh-portfolio/src/home/components/repoCard.tsx",["67"],"import React, { useEffect, useState } from 'react'\nimport { Spinner, Text, Image, Flex, useColorMode, Link, Button } from '@chakra-ui/react'\nimport { MarkDownSnippet } from '../../components/markDown/snippet'\nimport { ErrorBoundary } from '../../components/errorBoundary'\nimport error_image from './error.png'\n\ntype Props = {\n  repoName: String\n  isRight?: Boolean\n}\n\n\nexport function RepoCard({ repoName, isRight }: Props) {\n  const [error, setError] = useState({ message: '' })\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [data, setData] = useState({ content: '' })\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n\n  useEffect(() => {\n    fetch(`https://api.github.com/repos/EdwardBrodskiy/${repoName}/contents/README.md`)\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText)\n        }\n        return response\n      })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setData(result)\n          setIsLoaded(true)\n        },\n        (error) => {\n          console.log('error caught')\n          setError(error)\n          setIsLoaded(true)\n        }\n      )\n  }, [repoName])\n\n\n\n  if (error.message !== '') {\n    return <Text>Error: {error.message}</Text>\n  } else if (!isLoaded) {\n    return <Spinner />\n  } else {\n    let buff = Buffer.from(data.content, 'base64')\n    let text = buff.toString('ascii')\n\n    return (\n      <Flex\n        direction={isRight ? 'row-reverse' : 'row'}\n        {...isRight ? { ml: '10%' } : { mr: '10%' }}\n        rounded={20}\n        overflow='hidden'\n        bg={bgColor[colorMode]} >\n        <Image\n          height='20rem'\n          src={`https://github.com/EdwardBrodskiy/${repoName}/raw/master/sample-images/preview.jpg`}\n          fallbackSrc={error_image}\n          alt={`Preview for ${repoName}`}\n        />\n        <Flex m={4} textAlign={isRight ? 'right' : 'left'} direction='column' justify='space-between' w='100%'>\n          <ErrorBoundary>\n            <MarkDownSnippet markDown={text} />\n          </ErrorBoundary>\n          <Link\n            href={`https://github.com/EdwardBrodskiy/${repoName}`}\n            target='_blank'\n            textAlign={!isRight ? 'right' : 'left'} \n          >\n            <Button >See Repository</Button>\n          </Link>\n        </Flex>\n\n      </Flex>\n\n    )\n  }\n}\n","/home/edward/Documents/programing/gh-portfolio/src/components/markDown/snippet.tsx",[],"/home/edward/Documents/programing/gh-portfolio/src/components/errorBoundary/index.tsx",[],{"ruleId":"68","severity":1,"message":"69","line":5,"column":22,"nodeType":"70","messageId":"71","endLine":5,"endColumn":27},{"ruleId":"68","severity":1,"message":"72","line":7,"column":10,"nodeType":"70","messageId":"71","endLine":7,"endColumn":23},{"ruleId":"68","severity":1,"message":"73","line":7,"column":25,"nodeType":"70","messageId":"71","endLine":7,"endColumn":42},{"ruleId":"68","severity":1,"message":"74","line":11,"column":7,"nodeType":"70","messageId":"71","endLine":11,"endColumn":14},{"ruleId":"68","severity":1,"message":"75","line":14,"column":9,"nodeType":"70","messageId":"71","endLine":14,"endColumn":14},{"ruleId":"68","severity":1,"message":"75","line":10,"column":9,"nodeType":"70","messageId":"71","endLine":10,"endColumn":14},{"ruleId":"68","severity":1,"message":"76","line":2,"column":10,"nodeType":"70","messageId":"71","endLine":2,"endColumn":13},{"ruleId":"68","severity":1,"message":"77","line":2,"column":15,"nodeType":"70","messageId":"71","endLine":2,"endColumn":22},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"68","severity":1,"message":"76","line":2,"column":58,"nodeType":"70","messageId":"71","endLine":2,"endColumn":61},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","'ColorModeProvider' is defined but never used.","'history' is assigned a value but never used.","'match' is assigned a value but never used.","'Box' is defined but never used.","'Heading' is defined but never used.","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-global-assign","no-unsafe-negation"]