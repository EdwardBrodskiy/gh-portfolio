{"version":3,"sources":["home/components/repoCard.tsx","components/markDown/snippet.tsx","components/errorBoundary/index.tsx","home/components/error.png","serviceWorker.ts","about/index.tsx","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/components/repoList.tsx","home/index.tsx","routes.tsx","index.tsx"],"names":["RepoCard","repoName","isRight","useState","message","error","setError","isLoaded","setIsLoaded","content","data","setData","colorMode","useColorMode","useEffect","fetch","then","response","ok","Error","statusText","res","json","result","console","log","text","Buffer","from","toString","direction","ml","mr","rounded","overflow","bg","light","dark","height","src","fallbackSrc","error_image","alt","markDown","textAlign","mx","MarkDownSnippet","rest","split","title","first_para","trimed_title","slice","split_first_para","map","line","index","key","ErrorBoundary","props","state","hasError","errorInfo","this","children","React","Component","module","exports","Boolean","window","location","hostname","match","About","Box","Text","DarkModeToggle","toggleColorMode","IconButton","aria-label","onClick","icon","isRound","NavItem","m","p","fontSize","Header","useRouteMatch","h","pos","left","right","top","borderBottomWidth","width","Flex","justify","align","w","maxWidth","to","path","RepoList","name","repoList","repositories","priorityRepos","forEach","repo","excludedRepos","includes","push","List","spacing","Spinner","Home","Heading","as","mb","Routes","exact","component","history","createBrowserHistory","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"yaAYO,SAASA,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAAkB,EAC3BC,mBAAS,CAAEC,QAAS,KADO,mBAC9CC,EAD8C,KACvCC,EADuC,OAErBH,oBAAS,GAFY,mBAE9CI,EAF8C,KAEpCC,EAFoC,OAG7BL,mBAAS,CAAEM,QAAS,KAHS,mBAG9CC,EAH8C,KAGxCC,EAHwC,KAK7CC,EAAcC,cAAdD,UA8BR,GA3BAE,qBAAU,WACRC,MAAM,+CAAD,OAAgDd,EAAhD,wBACFe,MAAK,SAAUC,GACd,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAEvB,OAAOH,KAERD,MAAK,SAAAK,GAAG,OAAIA,EAAIC,UAChBN,MACC,SAACO,GACCZ,EAAQY,GACRf,GAAY,MAKd,SAACH,GACCmB,QAAQC,IAAI,gBACZnB,EAASD,GACTG,GAAY,QAGjB,CAACP,IAIkB,KAAlBI,EAAMD,QACR,OAAO,kBAAC,IAAD,eAAcC,EAAMD,SACtB,GAAKG,EAEL,CACL,IACImB,EADOC,EAAOC,KAAKlB,EAAKD,QAAS,UACrBoB,SAAS,SAEzB,OACE,kBAAC,IAAD,eACEC,UAAW5B,EAAU,cAAgB,OACjCA,EAAU,CAAC6B,GAAG,OAAS,CAACC,GAAG,OAFjC,CAGEC,QAAS,GACTC,SAAS,SACTC,GA3CU,CAAEC,MAAO,WAAYC,KAAM,YA2CzBzB,KACZ,kBAAC,IAAD,CACE0B,OAAO,QACPC,IAAG,4CAAuCtC,EAAvC,yCACHuC,YAAaC,IACbC,IAAG,sBAAiBzC,KAEtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiB0C,SAAUjB,EAAMkB,UAAW1C,EAAU,QAAU,OAAQ2C,GAAI,MAnBlF,OAAO,kBAAC,IAAD,S,sJC1CJ,SAASC,EAAT,GAAmE,IAAxCH,EAAuC,EAAvCA,SAAaI,EAA0B,8BAE3CJ,EAASK,MAAM,QAF4B,mBAEhEC,EAFgE,KAEzDC,EAFyD,KAIjEC,EAAeF,EAAMG,MAAM,GAE3BC,EAAmBH,EAAWF,MAAM,MAE1C,OACE,kBAAC,IAAQD,EACP,kBAAC,IAAD,KAAUI,GACTE,EAAiBC,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,IAAD,CAAMC,IAAKD,GAAQD,S,sHCjBnDG,EAAb,kDACE,WAAYC,GAAsB,IAAD,8BAC/B,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFM,EADnC,8DAWoBxD,EAAeyD,MAXnC,+BAgBI,OAAIC,KAAKH,MAAMC,SAEN,qDAGFE,KAAKJ,MAAMK,YArBtB,gDAMkC3D,GAE9B,MAAO,CAAEwD,UAAU,OARvB,GAAmCI,IAAMC,Y,mBCFzCC,EAAOC,QAAU,IAA0B,mC,gKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0DCfC,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,4B,4BCHC,SAASC,IAAkB,IAAD,EACUhE,cAA/BD,EADqB,EACrBA,UAAWkE,EADU,EACVA,gBACnB,OACE,kBAACC,EAAA,EAAD,CACAC,aAAW,oBACXC,QAASH,EACTI,KAAoB,UAAdtE,EAAuB,OAAS,MACtCuE,SAAS,ICFR,IAAMC,EAAU,SAAC,GAAuB,IAAtBpB,EAAqB,EAArBA,SACvB,OACE,kBAACY,EAAA,EAAD,CAAMS,EAAE,OAAOC,EAAG,EAAGC,SAAS,MAC3BvB,ICJMwB,EAAS,WACpB,IAAMf,EAAQgB,cAEN7E,EAAcC,cAAdD,UAER,OACE,kBAAC+D,EAAA,EAAD,CAAKe,EAAE,QACL,kBAACf,EAAA,EAAD,CACEW,EAAG,EACHI,EAAE,OACFvD,GANU,CAAEC,MAAO,WAAYC,KAAM,YAMzBzB,GACZ+E,IAAK,QACLC,KAAK,IACLC,MAAM,IACNC,IAAI,IACJC,kBAAkB,MAClBC,MAAM,QACN,kBAACC,EAAA,EAAD,CAAMC,QAAQ,gBAAgBC,MAAM,SAASC,EAAE,OAAOV,EAAE,QACtD,kBAACO,EAAA,EAAD,CAAME,MAAM,SAASD,QAAQ,eAAeG,SAAS,SACnD,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMC,GAAE,UAAK7B,EAAM8B,OAAnB,SACT,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMD,GAAE,UAAK7B,EAAM8B,KAAX,WAAR,WAEX,kBAAC1B,EAAD,U,gDCvBH,SAAS2B,IAAY,IAAD,EACCrG,mBAAS,CAAEC,QAAS,KADrB,mBAClBC,EADkB,KACXC,EADW,OAEOH,oBAAS,GAFhB,mBAElBI,EAFkB,KAERC,EAFQ,OAGDL,mBAAS,CAAC,CAAEsG,KAAM,MAHjB,mBAGlB/F,EAHkB,KAGZC,EAHY,KA6BzB,GAxBAG,qBAAU,WACRC,MAAM,qDACHC,MAAK,SAAUC,GACd,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAEvB,OAAOH,KAERD,MAAK,SAAAK,GAAG,OAAIA,EAAIC,UAChBN,MACC,SAACO,GACCf,GAAY,GACZG,EAAQY,MAKV,SAAClB,GACCC,EAASD,GACTG,GAAY,QAGjB,IAEmB,KAAlBH,EAAMD,QACR,OAAO,kBAACwE,EAAA,EAAD,eAAcvE,EAAMD,SACtB,GAAKG,EAEL,CACL,IAAImG,EAAWC,IAAaC,cAM5B,OALAlG,EAAKmG,SAAQ,SAAAC,GACNH,IAAaI,cAAcC,SAASF,EAAKL,OAAUC,EAASM,SAASF,EAAKL,OAAuB,KAAdK,EAAKL,MAC3FC,EAASO,KAAKH,EAAKL,SAIrB,kBAACS,EAAA,EAAD,CAAMC,QAAS,EAAGpF,GAAI,GACnB2E,EAASpD,KAAI,SAACrD,EAAUuD,GAAX,OAAqB,kBAAC0D,EAAA,EAAD,CAAUzD,IAAKxD,GAAU,kBAAC,IAAD,CAAUA,SAAUA,EAAUC,WAAYsD,EAAQ,UAVlH,OAAO,kBAAC4D,EAAA,EAAD,MCjCJ,SAASC,IAEd,OACE,kBAAC1C,EAAA,EAAD,KAEE,kBAAC2C,EAAA,EAAD,CAASC,GAAG,KAAKC,GAAI,GAArB,0BAEA,kBAAChB,EAAD,OCFN,IAkBeiB,EAlBA,WACb,IAAMhD,EAAQgB,cACd,OACE,oCACE,kBAAC,EAAD,MACA,kBAACd,EAAA,EAAD,CAAKU,EAAG,EAAGxC,GAAG,OACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6E,OAAK,EAAEnB,KAAI,UAAK9B,EAAM8B,MAAQoB,UAAWN,IAChD,kBAAC,IAAD,CAAQd,KAAI,UAAK9B,EAAM8B,KAAX,UAAyBoB,UAAWjD,IAFlD,Q,QCNFkD,EAAUC,cAEhB,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,CAAQL,QAASA,GACf,kBAAC,IAAD,CAAOnE,IAAI,OAAO8C,KAAI,gBAAmBoB,UAAWF,OAS9DS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SR4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzH,MAAK,SAAA0H,GACJA,EAAaC,gBAEdC,OAAM,SAAAvI,GACLmB,QAAQnB,MAAMA,EAAMD,c","file":"static/js/main.f47ec2f5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Spinner, Text, Image, Flex, useColorMode } from '@chakra-ui/core'\nimport { MarkDownSnippet } from '../../components/markDown/snippet'\nimport { ErrorBoundary } from '../../components/errorBoundary'\nimport error_image from './error.png'\n\ntype Props = {\n  repoName: String\n  isRight?: Boolean\n}\n\n\nexport function RepoCard({ repoName, isRight }: Props) {\n  const [error, setError] = useState({ message: '' })\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [data, setData] = useState({ content: '' })\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n\n  useEffect(() => {\n    fetch(`https://api.github.com/repos/EdwardBrodskiy/${repoName}/contents/README.md`)\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setData(result)\n          setIsLoaded(true)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log('error caught')\n          setError(error)\n          setIsLoaded(true)\n        }\n      )\n  }, [repoName])\n\n\n\n  if (error.message !== '') {\n    return <Text>Error: {error.message}</Text>\n  } else if (!isLoaded) {\n    return <Spinner />\n  } else {\n    let buff = Buffer.from(data.content, 'base64')\n    let text = buff.toString('ascii')\n\n    return (\n      <Flex\n        direction={isRight ? 'row-reverse' : 'row'}\n        {...isRight ? {ml:'10%'} : {mr:'10%'}}\n        rounded={20}\n        overflow='hidden'\n        bg={bgColor[colorMode]} >\n        <Image \n          height='20rem'\n          src={`https://github.com/EdwardBrodskiy/${repoName}/raw/master/sample-images/preview.jpg`}\n          fallbackSrc={error_image}\n          alt={`Preview for ${repoName}`}\n        />\n        <ErrorBoundary>\n          <MarkDownSnippet markDown={text} textAlign={isRight ? 'right' : 'left'} mx={4} />\n        </ErrorBoundary>\n      </Flex>\n\n    )\n  }\n}\n","import React from 'react'\nimport { Box, BoxProps, Heading, Text } from '@chakra-ui/core'\n\ntype Props = {\n  markDown: String\n}\n\n\nexport function MarkDownSnippet({ markDown, ...rest }: Props & BoxProps) {\n\n  const [title, first_para] = markDown.split('\\n\\n')\n\n  const trimed_title = title.slice(2)\n\n  const split_first_para = first_para.split('\\n')\n\n  return (\n    <Box {...rest}>\n      <Heading>{trimed_title}</Heading>\n      {split_first_para.map((line, index) => <Text key={index}>{line}</Text>)}\n    </Box>\n  )\n\n\n\n\n}\n","import React from 'react'\n\nexport class ErrorBoundary extends React.Component<{}, { hasError: boolean }> {\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error : Error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error : Error, errorInfo: any) {\n\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/error.43178c26.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { Box, Text } from '@chakra-ui/core'\n\nexport function About() {\n  return (\n    <Box>\n      <Text>Nothing yet to say</Text>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/core'\n\nexport function DarkModeToggle() {\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n      <IconButton\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light'? 'moon' : 'sun'}\n      isRound={true}\n    />\n    )\n  }\n","import React from 'react'\nimport { Text } from '@chakra-ui/core'\n\n\ntype Props = {\n  children: React.ReactElement\n}\n\nexport const NavItem = ({children}: Props) => {\n  return (\n    <Text m='auto' p={4} fontSize='lg'>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode } from '@chakra-ui/core'\nimport { Link, useRouteMatch} from 'react-router-dom'\nimport { DarkModeToggle } from '../DarkMode'\nimport { NavItem } from './NavItem'\nimport { MatchParams } from '../../types'\n\nexport const Header = () => {\n  const match = useRouteMatch<MatchParams>()\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  return (\n    <Box h='4rem'>\n      <Box\n        p={4}\n        h='4rem'\n        bg={bgColor[colorMode]}\n        pos={'fixed'}\n        left='0'\n        right='0'\n        top='0'\n        borderBottomWidth='1px'\n        width='full'>\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <Flex align='center' justify='space-evenly' maxWidth='480px' >\n            <NavItem><Link to={`${match.path}`}>Home</Link></NavItem>\n            <NavItem><Link to={`${match.path}/about`}>About</Link></NavItem>\n          </Flex>\n          <DarkModeToggle />\n        </Flex>\n\n      </Box >\n    </Box>\n\n\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Box, Heading, List, ListItem, Spinner, Text } from '@chakra-ui/core'\nimport { RepoCard } from './repoCard';\nimport { repositories } from '../../config.json'\n\n\nexport function RepoList() {\n  const [error, setError] = useState({ message: '' });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [data, setData] = useState([{ name: '' }]);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/EdwardBrodskiy/repos\")\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setData(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setError(error);\n          setIsLoaded(true);\n        }\n      )\n  }, [])\n\n  if (error.message !== '') {\n    return <Text>Error: {error.message}</Text>\n  } else if (!isLoaded) {\n    return <Spinner />\n  } else {\n    let repoList = repositories.priorityRepos\n    data.forEach(repo => {\n      if (!repositories.excludedRepos.includes(repo.name) && !repoList.includes(repo.name) && repo.name !== '') {\n        repoList.push(repo.name)\n      }\n    })\n    return (\n      <List spacing={8} ml={4}>\n        {repoList.map((repoName, index) => <ListItem key={repoName}><RepoCard repoName={repoName} isRight={!!(index % 2)} /></ListItem>)}\n      </List>\n    )\n  }\n}\n","import React from 'react'\nimport { Box, Heading } from '@chakra-ui/core'\nimport { RepoList } from './components/repoList'\n\n\nexport function Home() {\n\n  return (\n    <Box>\n\n      <Heading as='h1' mb={4} >My Public Repositories</Heading>\n\n      <RepoList />\n    </Box>\n\n  );\n}\n\n","import { Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { Route, Switch, useRouteMatch } from 'react-router-dom'\nimport { About } from './about'\nimport { Header } from './components/header'\nimport { Home } from './home'\nimport { MatchParams } from './types'\n\n\n\nconst Routes = () => {\n  const match = useRouteMatch<MatchParams>()\n  return (\n    <>\n      <Header />\n      <Box m={4} mx='10%' >\n        <Switch>\n          <Route exact  path={`${match.path}`} component={Home} />\n          <Route  path={`${match.path}/about`} component={About} /> {/*  TODO: remove 404 bug on page reload */}\n\n\n        </Switch>\n      </Box>\n\n    </>\n  )\n}\n\nexport default Routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport { Router, Route } from 'react-router-dom'\nimport './App.css'\nimport { ThemeProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/core\"\nimport Routes from './routes'\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <ThemeProvider >\n      <ColorModeProvider>\n        <CSSReset />\n        <Router history={history}>\n          <Route key='root' path={`/gh-portfolio`} component={Routes} />\n\n          \n        </Router>\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}