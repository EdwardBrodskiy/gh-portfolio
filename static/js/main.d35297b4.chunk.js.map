{"version":3,"sources":["serviceWorker.ts","about/index.tsx","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/index.tsx","routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","About","Box","Text","DarkModeToggle","useColorMode","colorMode","toggleColorMode","IconButton","aria-label","onClick","icon","isRound","NavItem","children","m","p","fontSize","Header","h","bg","light","dark","pos","left","right","top","borderBottomWidth","width","Flex","justify","align","w","maxWidth","to","Home","Routes","component","exact","key","path","from","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECfC,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,4B,oBCHC,SAASC,IAAkB,IAAD,EACUC,cAA/BC,EADqB,EACrBA,UAAWC,EADU,EACVA,gBACnB,OACE,kBAACC,EAAA,EAAD,CACAC,aAAW,oBACXC,QAASH,EACTI,KAAoB,UAAdL,EAAuB,OAAS,MACtCM,SAAS,ICFR,IAAMC,EAAU,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SACvB,OACE,kBAACX,EAAA,EAAD,CAAMY,EAAE,OAAOC,EAAG,EAAGC,SAAS,MAC3BH,ICLMI,EAAS,WAAO,IACnBZ,EAAcD,cAAdC,UAER,OACE,kBAACJ,EAAA,EAAD,CAAKiB,EAAE,QACL,kBAACjB,EAAA,EAAD,CACEc,EAAG,EACHG,EAAE,OACFC,GANU,CAAEC,MAAO,WAAYC,KAAM,YAMzBhB,GACZiB,IAAK,QACLC,KAAK,IACLC,MAAM,IACNC,IAAI,IACJC,kBAAkB,MAClBC,MAAM,QACN,kBAACC,EAAA,EAAD,CAAMC,QAAQ,gBAAgBC,MAAM,SAASC,EAAE,OAAOb,EAAE,QACtD,kBAACU,EAAA,EAAD,CAAME,MAAM,SAASD,QAAQ,eAAeG,SAAS,SACnD,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMC,GAAI,KAAV,SACT,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMA,GAAI,UAAV,WAEX,kBAAC9B,EAAD,UCvBH,SAAS+B,IACd,OACE,kBAACjC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,sBCEN,IAiBeiC,EAjBA,kBACb,oCACE,kBAAC,IAAD,CAAOC,UAAWnB,IAClB,kBAAChB,EAAA,EAAD,CAAKa,EAAG,GACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,OAAO,EAAMC,IAAI,aAAaC,KAAK,IAAIH,UAAWF,IAEzD,kBAAC,IAAD,CAAOG,OAAO,EAAMC,IAAI,cAAcC,KAAK,SAASH,UAAWpC,IAG/D,kBAAC,IAAD,CAAUwC,KAAK,IAAIP,GAAG,UCT9B,SAASQ,IACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,SAOVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d35297b4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { Box, Text } from '@chakra-ui/core'\n\nexport function About() {\n  return (\n    <Box>\n      <Text>Nothing yet to say</Text>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/core'\n\nexport function DarkModeToggle() {\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n      <IconButton\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light'? 'moon' : 'sun'}\n      isRound={true}\n    />\n    )\n  }\n","import React from 'react'\nimport { Text } from '@chakra-ui/core'\n\n\ntype Props = {\n  children: React.ReactElement\n}\n\nexport const NavItem = ({children}: Props) => {\n  return (\n    <Text m='auto' p={4} fontSize='lg'>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode } from '@chakra-ui/core'\nimport { Link } from 'react-router-dom'\nimport { DarkModeToggle } from '../DarkMode'\nimport { NavItem } from './NavItem'\n\nexport const Header = () => {\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  return (\n    <Box h='4rem'>\n      <Box\n        p={4}\n        h='4rem'\n        bg={bgColor[colorMode]}\n        pos={'fixed'}\n        left='0'\n        right='0'\n        top='0'\n        borderBottomWidth='1px'\n        width='full'>\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <Flex align='center' justify='space-evenly' maxWidth='480px' >\n            <NavItem><Link to={'/'}>Home</Link></NavItem>\n            <NavItem><Link to={'/about'}>About</Link></NavItem>\n          </Flex>\n          <DarkModeToggle />\n        </Flex>\n\n      </Box >\n    </Box>\n\n\n  )\n}\n","import React from 'react'\nimport { Box, Text } from '@chakra-ui/core'\n\nexport function Home() {\n  return (\n    <Box>\n      <Text>Welcome Home</Text>\n    </Box>\n  )\n}\n","import { Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { About } from './about'\nimport { Header } from './components/header'\nimport { Home } from './home'\n\n\nconst Routes = () => (\n  <>\n    <Route component={Header} />\n    <Box m={4}>\n      <Switch>\n        <Route exact={true} key='route-home' path='/' component={Home} />\n\n        <Route exact={true} key='route-about' path='/about' component={About} />\n\n        {/*Not found*/}\n        <Redirect from='*' to='/' />\n      </Switch>\n    </Box>\n\n  </>\n)\n\nexport default Routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport './App.css'\nimport { ThemeProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/core\"\nimport Routes from './routes'\n\nfunction App() {\n  return (\n    <ThemeProvider >\n      <ColorModeProvider>\n        <CSSReset />\n        <BrowserRouter>\n          <Routes />\n        </BrowserRouter>\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}