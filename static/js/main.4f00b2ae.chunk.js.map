{"version":3,"sources":["serviceWorker.ts","about/index.tsx","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/index.tsx","routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","About","Box","Text","DarkModeToggle","useColorMode","colorMode","toggleColorMode","IconButton","aria-label","onClick","icon","isRound","NavItem","children","m","p","fontSize","Header","h","bg","light","dark","pos","left","right","top","borderBottomWidth","width","Flex","justify","align","w","maxWidth","to","Home","useState","error","setError","isLoaded","setIsLoaded","name","data","setData","useEffect","fetch","then","res","json","result","Heading","as","mb","List","spacing","ml","map","repo","Spinner","Routes","component","exact","key","path","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"mPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECfC,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,4B,oBCHC,SAASC,IAAkB,IAAD,EACUC,cAA/BC,EADqB,EACrBA,UAAWC,EADU,EACVA,gBACnB,OACE,kBAACC,EAAA,EAAD,CACAC,aAAW,oBACXC,QAASH,EACTI,KAAoB,UAAdL,EAAuB,OAAS,MACtCM,SAAS,ICFR,IAAMC,EAAU,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SACvB,OACE,kBAACX,EAAA,EAAD,CAAMY,EAAE,OAAOC,EAAG,EAAGC,SAAS,MAC3BH,ICLMI,EAAS,WAAO,IACnBZ,EAAcD,cAAdC,UAER,OACE,kBAACJ,EAAA,EAAD,CAAKiB,EAAE,QACL,kBAACjB,EAAA,EAAD,CACEc,EAAG,EACHG,EAAE,OACFC,GANU,CAAEC,MAAO,WAAYC,KAAM,YAMzBhB,GACZiB,IAAK,QACLC,KAAK,IACLC,MAAM,IACNC,IAAI,IACJC,kBAAkB,MAClBC,MAAM,QACN,kBAACC,EAAA,EAAD,CAAMC,QAAQ,gBAAgBC,MAAM,SAASC,EAAE,OAAOb,EAAE,QACtD,kBAACU,EAAA,EAAD,CAAME,MAAM,SAASD,QAAQ,eAAeG,SAAS,SACnD,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMC,GAAI,KAAV,SACT,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMA,GAAI,UAAV,WAEX,kBAAC9B,EAAD,U,gCCtBH,SAAS+B,IAAQ,IAAD,EACKC,mBAAS,MADd,mBACdC,EADc,KACPC,EADO,OAEWF,oBAAS,GAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAGGJ,mBAAS,CAAC,CAAEK,KAAM,MAHrB,mBAGdC,EAHc,KAGRC,EAHQ,KAuBrB,OAlBAC,qBAAU,WACRC,MAAM,qDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCT,GAAY,GACZG,EAAQM,MAKV,SAACZ,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,kBAAClC,EAAA,EAAD,4BACGoC,EAIR,kBAACrC,EAAA,EAAD,KACE,kBAACgD,EAAA,EAAD,CAASC,GAAG,KAAKC,GAAI,GAArB,mBACA,kBAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,GAAI,GACnBb,EAAKc,KAAI,SAAAC,GAAI,OAAI,kBAACJ,EAAA,EAAD,KAAYI,EAAKhB,WANlC,kBAACiB,EAAA,EAAD,MCtBX,IAaeC,EAbA,kBACb,oCACE,kBAAC,IAAD,CAAOC,UAAW1C,IAClB,kBAAChB,EAAA,EAAD,CAAKa,EAAG,GACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8C,OAAK,EAACC,IAAI,aAAaC,KAAK,IAAIH,UAAWzB,IAClD,kBAAC,IAAD,CAAO2B,IAAI,cAAcC,KAAK,SAASH,UAAW3D,QCL1D,SAAS+D,IACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,SAOVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.4f00b2ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Box, Text } from '@chakra-ui/core'\r\n\r\nexport function About() {\r\n  return (\r\n    <Box>\r\n      <Text>Nothing yet to say</Text>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IconButton, useColorMode } from '@chakra-ui/core'\r\n\r\nexport function DarkModeToggle() {\r\n    const { colorMode, toggleColorMode } = useColorMode()\r\n    return (\r\n      <IconButton\r\n      aria-label='change color mode'\r\n      onClick={toggleColorMode}\r\n      icon={colorMode === 'light'? 'moon' : 'sun'}\r\n      isRound={true}\r\n    />\r\n    )\r\n  }\r\n","import React from 'react'\r\nimport { Text } from '@chakra-ui/core'\r\n\r\n\r\ntype Props = {\r\n  children: React.ReactElement\r\n}\r\n\r\nexport const NavItem = ({children}: Props) => {\r\n  return (\r\n    <Text m='auto' p={4} fontSize='lg'>\r\n      {children}\r\n    </Text>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Box, Flex, useColorMode } from '@chakra-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { DarkModeToggle } from '../DarkMode'\r\nimport { NavItem } from './NavItem'\r\n\r\nexport const Header = () => {\r\n  const { colorMode } = useColorMode()\r\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\r\n  return (\r\n    <Box h='4rem'>\r\n      <Box\r\n        p={4}\r\n        h='4rem'\r\n        bg={bgColor[colorMode]}\r\n        pos={'fixed'}\r\n        left='0'\r\n        right='0'\r\n        top='0'\r\n        borderBottomWidth='1px'\r\n        width='full'>\r\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\r\n          <Flex align='center' justify='space-evenly' maxWidth='480px' >\r\n            <NavItem><Link to={'/'}>Home</Link></NavItem>\r\n            <NavItem><Link to={'/about'}>About</Link></NavItem>\r\n          </Flex>\r\n          <DarkModeToggle />\r\n        </Flex>\r\n\r\n      </Box >\r\n    </Box>\r\n\r\n\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Box, Heading, List, ListItem, Spinner, Text } from '@chakra-ui/core'\r\n\r\n\r\nexport function Home() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [data, setData] = useState([{ name: \"\" }]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/users/EdwardBrodskiy/repos\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setData(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <Text>Somthing went wrong</Text>\r\n  } else if (!isLoaded) {\r\n    return <Spinner />\r\n  } else {\r\n    return (\r\n      <Box>\r\n        <Heading as='h1' mb={4} >My Public Repos</Heading>\r\n        <List spacing={4} ml={4}>\r\n          {data.map(repo => <ListItem >{repo.name}</ListItem>)}\r\n        </List>\r\n      </Box>\r\n\r\n    );\r\n  }\r\n}\r\n","import { Box } from '@chakra-ui/core'\r\nimport React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { About } from './about'\r\nimport { Header } from './components/header'\r\nimport { Home } from './home'\r\n\r\n\r\nconst Routes = () => (\r\n  <>\r\n    <Route component={Header} />\r\n    <Box m={4}>\r\n      <Switch>\r\n        <Route exact key='route-home' path='/' component={Home} />\r\n        <Route key='route-about' path='/about' component={About} />\r\n      </Switch>\r\n    </Box>\r\n\r\n  </>\r\n)\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './App.css'\r\nimport { ThemeProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/core\"\r\nimport Routes from './routes'\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider >\r\n      <ColorModeProvider>\r\n        <CSSReset />\r\n        <BrowserRouter>\r\n          <Routes />\r\n        </BrowserRouter>\r\n      </ColorModeProvider>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}