{"version":3,"sources":["home/components/repoCard.tsx","components/markDown/snippet.tsx","components/errorBoundary/index.tsx","serviceWorker.ts","about/index.tsx","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/index.tsx","routes.tsx","index.tsx"],"names":["RepoCard","repoName","useState","message","error","setError","isLoaded","setIsLoaded","content","data","setData","colorMode","useColorMode","useEffect","fetch","then","response","ok","Error","statusText","res","json","result","console","log","text","Buffer","from","toString","align","rounded","overflow","bg","light","dark","width","src","alt","mr","markDown","MarkDownSnippet","split","title","first_para","trimed_title","slice","split_first_para","map","line","index","key","ErrorBoundary","props","state","hasError","errorInfo","this","children","React","Component","Boolean","window","location","hostname","match","About","Box","Text","DarkModeToggle","toggleColorMode","IconButton","aria-label","onClick","icon","isRound","NavItem","m","p","fontSize","Header","useRouteMatch","h","pos","left","right","top","borderBottomWidth","Flex","justify","w","maxWidth","to","path","Home","name","Heading","as","mb","List","spacing","ml","repo","Spinner","Routes","component","exact","history","createBrowserHistory","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0a2d8a49.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Spinner, Text, Image, Flex, useColorMode } from '@chakra-ui/core'\nimport { MarkDownSnippet } from '../../components/markDown/snippet'\nimport { ErrorBoundary } from '../../components/errorBoundary'\n\ntype Props = {\n  repoName: String\n}\n\n\nexport function RepoCard({ repoName }: Props) {\n  const [error, setError] = useState({ message: '' })\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [data, setData] = useState({ content: '' })\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n\n  useEffect(() => {\n    fetch(`https://api.github.com/repos/EdwardBrodskiy/${repoName}/contents/README.md`)\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setData(result)\n          setIsLoaded(true)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log('error caught')\n          setError(error)\n          setIsLoaded(true)\n        }\n      )\n  })\n\n\n\n  if (error.message !== '') {\n    return <Text>Error: {error.message}</Text>\n  } else if (!isLoaded) {\n    return <Spinner />\n  } else {\n    let buff = Buffer.from(data.content, 'base64')\n    let text = buff.toString('ascii')\n\n    return (\n      <Flex align='row' rounded={20} overflow='hidden' bg={bgColor[colorMode]} >\n        <Image width='md' src='https://github.com/EdwardBrodskiy/MandelBrotSet/raw/master/Sample%20images/set%20of%204.png' alt='test' mr={4}/>\n        <ErrorBoundary>\n          <MarkDownSnippet markDown={text} />\n        </ErrorBoundary>\n      </Flex>\n\n    )\n  }\n}\n","import React from 'react'\nimport { Box, Heading, Text } from '@chakra-ui/core'\n\ntype Props = {\n  markDown: String\n}\n\n\nexport function MarkDownSnippet({ markDown }: Props) {\n\n  const [title, first_para] = markDown.split('\\n\\n')\n\n  const trimed_title = title.slice(2)\n\n  const split_first_para = first_para.split('\\n')\n\n  return (\n    <Box>\n      <Heading>{trimed_title}</Heading>\n      {split_first_para.map((line, index) => <Text key={index}>{line}</Text>)}\n    </Box>\n  )\n\n\n\n\n}\n","import React from 'react'\n\nexport class ErrorBoundary extends React.Component<{}, { hasError: boolean }> {\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error : Error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error : Error, errorInfo: any) {\n\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { Box, Text } from '@chakra-ui/core'\n\nexport function About() {\n  return (\n    <Box>\n      <Text>Nothing yet to say</Text>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/core'\n\nexport function DarkModeToggle() {\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n      <IconButton\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light'? 'moon' : 'sun'}\n      isRound={true}\n    />\n    )\n  }\n","import React from 'react'\nimport { Text } from '@chakra-ui/core'\n\n\ntype Props = {\n  children: React.ReactElement\n}\n\nexport const NavItem = ({children}: Props) => {\n  return (\n    <Text m='auto' p={4} fontSize='lg'>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode } from '@chakra-ui/core'\nimport { Link, useRouteMatch} from 'react-router-dom'\nimport { DarkModeToggle } from '../DarkMode'\nimport { NavItem } from './NavItem'\nimport { MatchParams } from '../../types'\n\nexport const Header = () => {\n  const match = useRouteMatch<MatchParams>()\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  return (\n    <Box h='4rem'>\n      <Box\n        p={4}\n        h='4rem'\n        bg={bgColor[colorMode]}\n        pos={'fixed'}\n        left='0'\n        right='0'\n        top='0'\n        borderBottomWidth='1px'\n        width='full'>\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <Flex align='center' justify='space-evenly' maxWidth='480px' >\n            <NavItem><Link to={`${match.path}`}>Home</Link></NavItem>\n            <NavItem><Link to={`${match.path}/about`}>About</Link></NavItem>\n          </Flex>\n          <DarkModeToggle />\n        </Flex>\n\n      </Box >\n    </Box>\n\n\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Box, Heading, List, ListItem, Spinner, Text } from '@chakra-ui/core'\nimport { RepoCard } from './components/repoCard';\n\n\nexport function Home() {\n  const [error, setError] = useState({ message: '' });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [data, setData] = useState([{ name: '' }]);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/EdwardBrodskiy/repos\")\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setData(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setError(error);\n          setIsLoaded(true);\n        }\n      )\n  }, [])\n\n  if (error.message !== '') {\n    return <Text>Error: {error.message}</Text>\n  } else if (!isLoaded) {\n    return <Spinner />\n  } else {\n    return (\n      <Box>\n\n        <Heading as='h1' mb={4} >My Public Repos</Heading>\n        \n        <List spacing={4} ml={4}>\n          {data.map(repo => <ListItem key={repo.name}><RepoCard repoName={repo.name} /></ListItem>)}\n        </List>\n      </Box>\n\n    );\n  }\n}\n","import { Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { Route, Switch, useRouteMatch } from 'react-router-dom'\nimport { About } from './about'\nimport { Header } from './components/header'\nimport { Home } from './home'\nimport { MatchParams } from './types'\n\n\n\nconst Routes = () => {\n  const match = useRouteMatch<MatchParams>()\n  console.log(match.path)\n  return (<>\n  <Route component={Header} />\n  <Box m={4}>\n    <Switch>\n      <Route exact key='route-home' path={`${match.path}`} component={Home} />\n      <Route key='route-about' path={`${match.path}/about`} component={About} /> {/*  TODO: remove 404 bug on page reload */}\n\n      \n    </Switch>\n  </Box>\n\n</>)\n}\n\nexport default Routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport { Router, Route } from 'react-router-dom'\nimport './App.css'\nimport { ThemeProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/core\"\nimport Routes from './routes'\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <ThemeProvider >\n      <ColorModeProvider>\n        <CSSReset />\n        <Router history={history}>\n          <Route key='root' path={`/gh-portfolio`} component={Routes} />\n\n          \n        </Router>\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}